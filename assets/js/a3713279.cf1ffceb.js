"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[720],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>m});var o=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=o.createContext({}),c=function(e){var n=o.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=c(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(r),g=t,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||a;return r?o.createElement(m,i(i({ref:n},l),{},{components:r})):o.createElement(m,i({ref:n},l))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=g;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[u]="string"==typeof e?e:t,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}g.displayName="MDXCreateElement"},8997:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=r(7462),t=(r(7294),r(3905));const a={sidebar_position:4,title:"Deployment"},i="Deployment",s={unversionedId:"deployment",id:"deployment",title:"Deployment",description:"The details for this guide are still being written",source:"@site/docs/deployment.md",sourceDirName:".",slug:"/deployment",permalink:"/distributed-design/deployment",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Deployment"},sidebar:"docsSidebar",previous:{title:"Walkthrough",permalink:"/distributed-design/walkthrough"},next:{title:"Tutorial",permalink:"/distributed-design/tutorial"}},p={},c=[],l={toc:c},u="wrapper";function d(e){let{components:n,...r}=e;return(0,t.kt)(u,(0,o.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"deployment"},"Deployment"),(0,t.kt)("admonition",{type:"caution"},(0,t.kt)("p",{parentName:"admonition"},"The details for this guide are still being written")),(0,t.kt)("p",null,"Currently, cloud deployment is handled by passing the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/distributed-design/blob/main/deploy.json"},(0,t.kt)("inlineCode",{parentName:"a"},"/deploy.json"))," configuration file to the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/distributed-design/blob/main/scripts/deploy-azure.ps1"},(0,t.kt)("inlineCode",{parentName:"a"},"/scripts/deploy-azure.ps1"))," script. Common functions are defined in ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/distributed-design/blob/main/scripts/functions.ps1"},(0,t.kt)("inlineCode",{parentName:"a"},"/scripts/functions.ps1")),". All of this infrastructure can be destroyed via the ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/JaimeStill/distributed-design/blob/main/scripts/destroy-azure.ps1"},(0,t.kt)("inlineCode",{parentName:"a"},"/scripts/destroy-azure.ps1"))," script."),(0,t.kt)("admonition",{type:"info"},(0,t.kt)("p",{parentName:"admonition"},"This is going to be broken out a bit more in the future to make it more flexible.")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="deploy.json"',title:'"deploy.json"'},'{\n    "prefix": "jps-sync",\n    "location": "eastus",\n    "resourceGroup": "-rg",\n    "appPlan": {\n        "name": "-plan",\n        "sku": "F1"\n    },\n    "acr": {\n        "domain": "azurecr.io",\n        "name": "jpssyncregistry",\n        "sku": "Standard"\n    },\n    "sql": {\n        "server": "-sql",\n        "firewallRule": "HomeIP"\n    },\n    "apps": {\n        "path": "apps/",\n        "projects": [\n            {\n                "dockerfile": "apps/workflows/Dockerfile",\n                "hook": "deployworkflowsapp",\n                "tag": "workflows-app"\n            },\n            {\n                "dockerfile": "apps/proposals/Dockerfile",\n                "hook": "deployproposalsapp",\n                "tag": "proposals-app"\n            }\n        ]\n    },\n    "nodes": {\n        "path": "nodes/",\n        "projects": [\n            {\n                "appsettings": "nodes/workflows/Workflows.Api/appsettings.Production.json",\n                "data": "nodes/workflows/Workflows.Data",\n                "db": "workflows-node",\n                "dockerfile": "nodes/workflows/Workflows.Api/Dockerfile",\n                "hook": "deployworkflowsnode",\n                "tag": "workflows-node"\n            },\n            {\n                "appsettings": "nodes/proposals/Proposals.Api/appsettings.Production.json",\n                "data": "nodes/proposals/Proposals.Data",\n                "db": "proposals-node",\n                "dockerfile": "nodes/proposals/Proposals.Api/Dockerfile",\n                "hook": "deployproposalsnode",\n                "tag": "proposals-node"\n            }\n        ]\n    }\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="functions.ps1"',title:'"functions.ps1"'},'function Get-Json([string] $path) {\n    Get-Content $path -Raw | ConvertFrom-Json\n}\n\nfunction Get-PublicIp([string] $url = "ifcfg.me") {\n    Invoke-RestMethod $url\n}\n\nfunction Get-SecureString([SecureString] $value) {\n    ConvertFrom-SecureString $value -AsPlainText\n}\n\nfunction Merge-Name([string] $prefix, [string] $value) {\n    Write-Output "$prefix$value"\n}\n')),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-powershell",metastring:'title="deploy-azure.ps1"',title:'"deploy-azure.ps1"'},'param(\n    [string]\n    [Parameter(Mandatory)]\n    $Configuration,\n    [string]\n    [Parameter(Mandatory)]\n    $SqlAdmin,\n    [SecureString]\n    [Parameter(Mandatory)]\n    $SqlPassword,\n    [string]\n    [Parameter()]\n    $Root = \'..\\\'\n)\n\n# load core functions\n. .\\functions.ps1\n\n# variable initialization\n$origin = $pwd\n$config = Get-Json $Configuration\n$ip = Get-PublicIp\n$rg = Merge-Name $config.prefix $config.resourceGroup\n$plan = Merge-Name $config.prefix $config.appPlan.name\n$sql = Merge-Name $config.prefix $config.sql.server\n\nSet-Location $Root\n\n# resource group\naz group create `\n    --location $config.location `\n    --name $rg\n\n# azure container registry\naz acr create `\n    --resource-group $rg `\n    --name $config.acr.name `\n    --sku $config.acr.sku `\n    --admin-enabled $true\n\n$acrAdmin = (az acr credential show `\n        --name $config.acr.name `\n        --query "username" `\n        --output tsv)\n\n$acrPassword = (az acr credential show `\n        --name $config.acr.name `\n        --query "passwords[0].value" `\n        --output tsv)\n\n# appservice plan\naz appservice plan create `\n    --name $plan `\n    --resource-group $rg `\n    --sku $config.appPlan.sku `\n    --is-linux\n\n# sql server\naz sql server create `\n    --name $sql `\n    --resource-group $rg `\n    --location $config.location `\n    --admin-user $SqlAdmin `\n    --admin-password (Get-SecureString $SqlPassword)\n\n# sql firewall rule: Home IP Address\naz sql server firewall-rule create `\n    --server $sql `\n    --resource-group $rg `\n    --name $config.sql.firewallRule `\n    --start-ip-address $ip `\n    --end-ip-address $ip\n\n# sql firewall rule: Azure Services\naz sql server firewall-rule create `\n    --server $sql `\n    --resource-group $rg `\n    --name "Azure Services" `\n    --start-ip-address 0.0.0.0 `\n    --end-ip-address 0.0.0.0\n\nforeach ($node in $config.nodes.projects) {\n    # initialize variables\n    $name = Merge-Name $config.prefix "-$($node.tag)"\n    $appsettings = Get-Json $node.appsettings\n\n    # build and deploy image\n    az acr build `\n        --registry $config.acr.name `\n        --image $node.tag `\n        --file $node.dockerfile `\n        $config.nodes.path\n\n    # deploy image to app service\n    az webapp create `\n        --name $name `\n        --plan $plan `\n        --resource-group $rg `\n        --docker-registry-server-user $acrAdmin `\n        --docker-registry-server-password $acrPassword `\n        --deployment-container-image-name "$($config.acr.name).$($config.acr.domain)/$($node.tag):latest"\n\n    # configure webapp logging\n    az webapp log config `\n        --name $name `\n        --resource-group $rg `\n        --web-server-logging filesystem\n\n    # configure continuous deployment\n    az webapp deployment container config `\n        --resource-group $rg `\n        --name $name `\n        --enable-cd $true\n\n    # get webhook URL\n    $hook = (az webapp deployment container show-cd-url `\n            --resource-group $rg `\n            --name $name `\n            --query "CI_CD_URL" `\n            --output tsv)\n\n    # register webhook with acr\n    az acr webhook create `\n        --resource-group $rg `\n        --registry $config.acr.name `\n        --name $node.hook `\n        --uri $hook `\n        --actions push\n\n    # add cors with origins\n    az webapp cors add `\n        --resource-group $rg `\n        --name $name `\n        --allowed-origins $appsettings.CorsOrigins\n\n    # enable credentials for CORS\n    az resource update `\n        --name web `\n        --resource-group $rg `\n        --namespace Microsoft.Web `\n        --resource-type config `\n        --parent sites/$name `\n        --set properties.cors.supportCredentials=true\n\n    # create sql database\n    az sql db create `\n        --server $sql `\n        --resource-group $rg `\n        --name $node.db `\n        --service-objective S0\n\n    # capture connection string\n    $cs = (az sql db show-connection-string `\n            --name $node.db `\n            --server $sql `\n            --client ado.net `\n            --output tsv)\n\n    $cs = $cs.Replace(\'<username>\', $SqlAdmin).Replace(\'<password>\', (Get-SecureString $SqlPassword))\n\n    # apply database migrations\n    & dotnet ef database update `\n        --project $node.data `\n        --connection $cs\n\n    # register connection string with webapp\n    az webapp config connection-string set `\n        --name $name `\n        --resource-group $rg `\n        --connection-string-type SQLServer `\n        --settings "Node=$cs"\n}\n\nforeach ($app in $config.apps.projects) {\n    # initialize variables\n    $name = Merge-Name $config.prefix "-$($app.tag)"\n\n    # build and deploy image\n    az acr build `\n        --registry $config.acr.name `\n        --image $app.tag `\n        --file $app.dockerfile `\n        $config.apps.path\n\n    # deploy image to app service\n    az webapp create `\n        --name $name `\n        --plan $plan `\n        --resource-group $rg `\n        --docker-registry-server-user $acrAdmin `\n        --docker-registry-server-password $acrPassword `\n        --deployment-container-image-name "$($config.acr.name).$($config.acr.domain)/$($app.tag):latest"\n\n    # configure webapp logging\n    az webapp log config `\n        --name $name `\n        --resource-group $rg `\n        --web-server-logging filesystem\n\n    # configure continuous deployment\n    az webapp deployment container config `\n        --resource-group $rg `\n        --name $name `\n        --enable-cd $true\n\n    # get webhook URL\n    $hook = (az webapp deployment container show-cd-url `\n            --resource-group $rg `\n            --name $name `\n            --query "CI_CD_URL" `\n            --output tsv)\n\n    # register webhook with acr\n    az acr webhook create `\n        --resource-group $rg `\n        --registry $config.acr.name `\n        --name $app.hook `\n        --uri $hook `\n        --actions push\n}\n\nSet-Location $origin\nparam(\n    [string]\n    [Parameter(Mandatory)]\n    $Configuration\n)\n\n# load core functions\n. .\\functions.ps1\n\n# variable initialization\n$config = Get-Json $Configuration\n$rg = Merge-Name $config.prefix $config.resourceGroup\n\n# delete resource group\n& az group delete -n $rg -y\n')))}d.isMDXComponent=!0}}]);